// 비트 이동 연산자 : >>, >>>, <<,
package step04;

public class Exam04_3 {
    public static void main(String[] args) {
        int i = 0b0110_1001; // 105
        System.out.println(i >>> 1); //0b0011_0100 => 52
        System.out.println(i >>> 2); //0b00011010 => 26
        System.out.println(i >>> 3); //0b00001101 => 13
        System.out.println(i >>> 4); //0b00000110 => 6
        // >>> 연산자를 사용하여 오른쪽으로 이동한다면,
        // 왼쪽 빈자리는 "무조건" 0 으로 채운다.
        // 그래서 양수일 때는 >> 연산자와 같은 결과가 나오지만,
        // 다음과 같이 음수 일때는 양수로 바뀌는 결과가 나온다.

        // 음수의 경우
        i = 0b11111111_11111111_11111111_10101001; // -87
        // 0_11111111_11111111_11111111_1010100|1
        // => 왼쪽 빈자리는 0으로 채운다.
        //    즉 양수로 바뀐다.
        //    양수로 바뀌는 순간 엄청나게 큰 수가 된다.
        System.out.println(i >>> 1); // 
        // 00_11111111_11111111_11111111_101010|01
        System.out.println(i >>> 2); // 

        System.out.println(i >>> 3); // 
        
        System.out.println(i >>> 4); // 
        // => 2로 나눈 후에 소수점이 있으면
        //    그 수보다 더 작은 정수값이 되는 결과가 나온다.
    }
}