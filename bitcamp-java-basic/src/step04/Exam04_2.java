// 비트 이동 연산자 : >>, >>>, <<,
package step04;

public class Exam04_2 {
    public static void main(String[] args) {
        int i = 0b0110_1001; // 105
        System.out.println(i >> 1); //0b0011_0100 => 52
        System.out.println(i >> 2); //0b00011010 => 26
        System.out.println(i >> 3); //0b00001101 => 13
        System.out.println(i >> 4); //0b00000110 => 6
        // 오른쪽으로 이동 후,
        // 왼쪽 빈자리 : 원래 숫자와 같은 부호 값으로 채운다
        //              양수면 0, 음수면 1을 채운다.
        // 왼쪽 경계를 넘어간 비트는 짜른다.

        // 음수의 경우
        i = 0b11111111_11111111_11111111_10101001; // -87
        // 1_11111111_11111111_11111111_1010100|1
        // => 왼쪽 빈자리를 숫자의 부호비트로 채운다.
        // => 음수니까 1로 채운다.
        System.out.println(i >> 1); // -44
        // 11_11111111_11111111_11111111_101010|01
        System.out.println(i >> 2); // -22
        System.out.println(i >> 3); // -11
        System.out.println(i >> 4); // -6
        // => 2로 나눈 후에 소수점이 있으면
        //    그 수보다 더 작은 정수값이 되는 결과가 나온다.
    }
}
// 오른쪽 이동
// - 1비트 이동은 나누기 2한 것과 같은 효과를 준다.
// - 소수점 이하는 짤리는 효과를 갖는다.
