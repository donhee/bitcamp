<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="bitcamp.java106.pms">
        <!-- bitcamp.mvc.web 패키지에 있는 클래스는 IoC 컨테이너에서 만들지 말라 -->
        <!-- 프론트 컨트롤러가 관리하는 객체는 제외한다. -->
        <context:exclude-filter type="regex" expression="bitcamp.java106.pms.web.*"/>
    </context:component-scan>
    
    <bean id="sqlSessionFactory" 
            class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="dataSource" ref="dataSource" />
       <property name="mapperLocations" 
            value="classpath*:bitcamp/java106/pms/sql/*Mapper.xml" />
       <property name="typeAliasesPackage" value="bitcamp.java106.pms.domain" /> <!-- 패키지 지정한다. 패키지에 있는 객체를 찾아서 별명을 자동으로 지정해준다  -->
    </bean>
    
    <bean id="dataSource" 
        class="org.apache.commons.dbcp.BasicDataSource" 
        destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <context:property-placeholder 
        location="classpath*:jdbc.properties,
                  classpath*:aws.properties"/>
    
    <!-- DAO 구현체를 자동으로 만들어주는 객체를 준비 
        => 개발자는 DAO를 직접 구현할 필요가 없다.
        => 단지 인터페이스만 선언하면 된다.
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <!-- DAO 인터페이스가 선언된 패키지를 지정한다. -->
      <property name="basePackage" value="bitcamp.java106.pms.dao" />
    </bean>
    
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:advisor advice-ref="txAdvice" 
                    pointcut="execution(* bitcamp.java106.pms.service.impl.*.*(..))"/>
    </aop:config>
    
    
    <!-- 메일 발송할 객체 생성 -->
        <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="587" />
        <property name="username" value="bitdeveloptest@gmail.com" />
        <property name="password" value="as2e!xl9" />
    <!-- email 요청시는 SMTP -->
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
    
</beans>